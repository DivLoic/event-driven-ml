plugins {
    id 'com.google.cloud.tools.jib' version '1.7.0'
}

apply plugin: 'scala'
apply plugin: 'application'

mainClassName = "fr.xebia.gbildi.Serving"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url = 'http://packages.confluent.io/maven/' }
}

dependencies {
    implementation 'org.scala-lang:scala-library:2.12.8'

    implementation project(':edml-schema')

    implementation group: 'org.typelevel', name: 'cats-core_2.12', version: '1.6.0'

    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'com.github.pureconfig', name: 'pureconfig_2.12', version: '0.12.1'

    implementation group: 'org.apache.kafka', name: 'kafka-streams-scala_2.12', version: '2.4.1'

    implementation group: 'com.spotify', name: 'zoltar-api', version: '0.5.6'
    implementation group: 'com.spotify', name: 'zoltar-tensorflow', version: '0.5.6'

    implementation group: 'io.prometheus.jmx', name: 'jmx_prometheus_javaagent', version: '0.12.0'

    testImplementation group: 'org.scalatest', name: 'scalatest_2.12', version: '3.1.0'
    testImplementation group: 'org.scalactic', name: 'scalactic_2.12', version: '3.1.0'

    testImplementation 'com.sksamuel.avro4s:avro4s-core_2.12:3.0.6'
}

jib {
    from.image = 'openjdk:8-jdk'
    to {
        tags = ['latest', version]
        image = 'gcr.io/event-driven-ml/edml-serving'
    }
    container {
        mainClass = mainClassName
        jvmFlags = [ "-Dcom.sun.management.jmxremote=true",
                     "-Djava.rmi.server.port=7001",
                     "-Djava.rmi.server.hostname=127.0.0.1",
                     "-Dcom.sun.management.jmxremote.authenticate=false",
                     "-Dcom.sun.management.jmxremote.authenticate=false",
                     "-Dcom.sun.management.jmxremote.ssl=false",
                     "-javaagent:/app/libs/jmx_prometheus_javaagent-0.12.0.jar=9001:" +
                             "/app/resources/jmx-export-config.yaml"]
    }
}

compileScala {
    scalaCompileOptions.additionalParameters = [
            '-encoding', 'utf8',
            '-language:postfixOps',
            '-Ypartial-unification',
            '-Xmacro-settings:materialize-derivations'
    ]
}

task spec(dependsOn: ['compileTestScala'], type: JavaExec) {
    group = 'verification'
    description = 'Runs the scala tests.'
    main = 'org.scalatest.tools.Runner'
    args = ['-R', 'build/classes/scala/test', '-o']
    classpath = sourceSets.test.runtimeClasspath
}

test.dependsOn spec
jib.dependsOn build